services:
  frontend:
    init: true
    restart: always
    build:
      context: ./frontend
    environment:
      NODE_ENV: production
    ports:
      - "8080:8080"
  backend-data-layer:
    build:
      context: backend/data-layer
    ports:
      - "8002:8002"
    environment:
      POSTGRES_USER: backend
      POSTGRES_PASSWORD: backend
      POSTGRES_DB: backend
      DB_HOST: localhost
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy
  algorithms:
    build:
      context: algorithms
    ports:
      - "8000:80"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    environment:
      HF_HOME: /.cache
      #DATABASE_URL: postgresql://algorithms:algorithms@postgres:5432/algorithms
      POSTGRES_SCHEME: postgresql://
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydatabase
      ELASTICSEARCH_URL: http://elasticsearch:9200
    volumes:
      - ./elastic_cache:/.cache
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.21
    environment:
      - discovery.type=single-node
    volumes:
      - ./elastic_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
  postgres:
    image: postgres:13
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./postgres-init.sh:/docker-entrypoint-initdb.d/postgres-init.sh
    environment:
      POSTGRES_MULTIPLE_DATABASES: algorithms,backend
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d postgres || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
